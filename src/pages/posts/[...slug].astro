---
export const prerender = true;

import {
  getCollection,
  getEntries,
  type CollectionEntry,
  getEntry,
} from "astro:content";

import { getImage, Image } from "astro:assets";

import PostLayout from "@/shared/layouts/PostLayout.astro";

import BlogPost from "@/shared/components/BlogPost.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return posts.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

type Props = {
  entry: CollectionEntry<"posts">;
};

const { entry } = Astro.props;
const { Content } = await entry.render();

const { data: author } = await getEntry("authors", entry.data.author.id);

const relatedPosts = entry.data.relatedPosts
  ? await getEntries(entry.data.relatedPosts)
  : [];

const optimizedImage = await getImage({
  src: author.headshot,
  format: "webp",
  inferSize: true,
});
---

<PostLayout frontmatter={entry.data}>
  <div class="meta">
    <Image src={optimizedImage.src} alt={author.name} width={48} height={48} />
    <p>{author.name}</p>
    <span>â€¢</span>
    <time datetime={entry.data.pubDate.toISOString()}
      >{
        entry.data.pubDate.toLocaleDateString(undefined, {
          dateStyle: "medium",
          timeZone: "UTC",
        })
      }</time
    >
  </div>
  <Content />
  {
    relatedPosts.length > 0 && (
      <div class="post-wrapper">
        <h2>Related Posts</h2>
        <div>
          {relatedPosts.map((p) => (
            <BlogPost post={p} />
          ))}
        </div>
      </div>
    )
  }
</PostLayout>

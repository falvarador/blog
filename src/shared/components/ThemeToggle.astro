---
const themes = ["light", "dark", "system"];

const cookieTheme = Astro.cookies.get("theme")?.value;
const theme = cookieTheme ?? "system";
---

<style>
  theme-toggle {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;

    & label {
      display: grid;
    }
  }

  /* :global(.dark) .sun {
    fill: transparent;
  }
  :global(.dark) .moon {
    fill: white;
  } */
</style>

<theme-toggle>
  {
    themes.map((t) => (
      <label>
        {t}
        <input type="radio" checked={theme === t} name="theme-toggle" id={t} />
      </label>
    ))
  }
</theme-toggle>

<script>
  type Themes = "light" | "dark" | "system";

  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
    }

    connectedCallback() {
      this.addEventListener("change", this);
    }

    disconnectedCallback() {
      this.removeEventListener("change", this);
    }

    handleEvent(event: Event) {
      if (event.type === "change") {
        this.handleChange(event);
      }
    }

    handleChange(e: Event) {
      const theme = (e.target as HTMLElement).id as Themes;
      this.changeTheme(theme);
      this.saveTheme(theme);
    }

    changeTheme(theme: Themes) {
      document.documentElement.setAttribute("data-theme", theme);
    }

    saveTheme(theme: Themes) {
      const d = new Date();
      d.setTime(d.getTime() + 365 * 86400000);
      document.cookie = `theme=${theme};expires=${d.toUTCString()}`;
    }
  }

  customElements.define("theme-toggle", ThemeToggle);
</script>
